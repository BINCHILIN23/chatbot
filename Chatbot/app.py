# -*- coding: utf-8 -*-
"""Copia de Chatbot_felicidad 2.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jP_NZURN_1arfbhU5CFgF747TnmhlNEg

===============
Adaptado para Naive-Bayes
===============
"""

from google.colab import drive
import pandas as pd
# Montar Google Drive
drive.mount('/content/drive')

ruta="/content/drive/MyDrive/Chatbot/faq_felicidad_expandido_v2_con_nuevas_respuestas - faq_felicidad_expandido_v2_con_nuevas_respuestas.csv.csv"
df = pd.read_csv(ruta)
df

!pip install sentence-transformers

data = [
    # Categoría: saludo
    {"pregunta": "hola", "respuesta": "¡Hola! ¿En qué puedo ayudarte hoy?", "categoria": "saludo"},
    {"pregunta": "buenos días", "respuesta": "¡Buenos días! Estoy aquí para responder tus preguntas sobre el Informe Mundial de la Felicidad.", "categoria": "saludo"},
    {"pregunta": "buenas tardes", "respuesta": "¡Buenas tardes! ¿Te interesa saber algo sobre la felicidad global?", "categoria": "saludo"},
    {"pregunta": "buenas noches", "respuesta": "¡Buenas noches! Estoy disponible para ayudarte con información sobre el informe.", "categoria": "saludo"},

    # Categoría: contexto
    {"pregunta": "¿quién eres?", "respuesta": "Soy un chatbot diseñado para responder preguntas sobre el Informe Mundial de la Felicidad.", "categoria": "contexto"},
    {"pregunta": "¿qué eres?", "respuesta": "Soy una inteligencia artificial que te puede ayudar a entender mejor el Informe Mundial de la Felicidad.", "categoria": "contexto"},
    {"pregunta": "¿cuál es tu función?", "respuesta": "Mi función es ayudarte a explorar y comprender los datos y hallazgos del Informe Mundial de la Felicidad.", "categoria": "contexto"},

    # Categoría: pregunta
    {"pregunta": "¿qué es el informe mundial de la felicidad?", "respuesta": "Es un estudio anual que clasifica a los países según el nivel de felicidad de sus habitantes, basado en factores como salud, ingresos, libertad y apoyo social.", "categoria": "pregunta"},
    {"pregunta": "¿quién publica el informe mundial de la felicidad?", "respuesta": "El informe es publicado por la Red de Soluciones para el Desarrollo Sostenible de las Naciones Unidas.", "categoria": "pregunta"},
    {"pregunta": "¿cuál es el país más feliz del mundo?", "respuesta": "Según el último informe, Finlandia ha sido clasificado como el país más feliz del mundo.", "categoria": "pregunta"},
    {"pregunta": "¿qué factores se consideran en el informe?", "respuesta": "Se consideran factores como el PIB per cápita, apoyo social, esperanza de vida saludable, libertad para tomar decisiones, generosidad y percepción de corrupción.", "categoria": "pregunta"},
    {"pregunta": "¿cómo se mide la felicidad?", "respuesta": "La felicidad se mide a través de encuestas donde las personas califican su vida en una escala del 0 al 10, además de indicadores objetivos.", "categoria": "pregunta"},

    # Categoría: despedida
    {"pregunta": "gracias", "respuesta": "¡Con mucho gusto! ¿Hay algo más en lo que te pueda ayudar?", "categoria": "despedida"},
    {"pregunta": "eso es todo", "respuesta": "Fue un placer ayudarte. ¡Que tengas un excelente día!", "categoria": "despedida"},
    {"pregunta": "adiós", "respuesta": "Hasta luego. Si tienes más preguntas sobre la felicidad mundial, estaré aquí para ayudarte.", "categoria": "despedida"},
    {"pregunta": "nos vemos", "respuesta": "¡Nos vemos pronto! Recuerda que la felicidad también se comparte.", "categoria": "despedida"}
]


for _, row in df.iterrows():
    nueva_entrada = {
        "pregunta": row["pregunta"],
        "respuesta": row["respuesta_compuesta"],
        "categoria": row["categoria"]
    }
    data.append(nueva_entrada)

print(len(data))

from collections import Counter

conteo_por_categoria = Counter([d["categoria"] for d in data])
print(conteo_por_categoria)

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB

# Datos: pregunta → respuesta
X = [item["pregunta"] for item in data]
y = [item["respuesta"] for item in data]

# Creamos el pipeline: vectorizador + clasificador
chatbot_nb = Pipeline([
    ('tfidf', TfidfVectorizer(ngram_range=(1,2))),
    ('clf', MultinomialNB())
])

# Entrenamos el modelo
chatbot_nb.fit(X, y)

vectorizador = chatbot_nb.named_steps['tfidf']
tokens = vectorizador.get_feature_names_out()
print(tokens[:50])  # muestra los primeros 50 tokens
print("Total de tokens:", len(tokens))

def responder_nb(pregunta_usuario):
    respuesta_predicha = chatbot_nb.predict([pregunta_usuario])[0]
    #print(pregunta_usuario)
    probas = chatbot_nb.predict_proba([pregunta_usuario])[0]
    confianza = max(probas)
    return respuesta_predicha, confianza

while True:
    user_input = input("Tú: ")
    if user_input.lower() in ["salir", "exit", "adiós","chao", "adios", "bye","sayonara","hasta luego"]:
        print("Chatbot: ¡Hasta luego!")
        break

    respuesta, score = responder_nb(user_input)
    print(f"Chatbot ({score:.3f}): {respuesta}")

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Dividir los datos (80% entrenamiento, 20% prueba)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

y_pred = chatbot_nb.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))